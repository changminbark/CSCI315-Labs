1.1 
The implementation is susceptible to external fragmentation as allocated memory that is freed can leave gaps in the memory.
The free memory is not contiguous but interleaved between allocated blocks.

1.2
Allocation Time - The time it takes to find a suitable free block and complete the allocation. This will measure the latency
of the allocation process using the specific policy.
Use clock() or gettimeofday() in C to record the start and end time of each call to allocate().

Memory Utilization - Ratio of memory actively allocated to total memory obtained from the OS. This will measure how much of the 
total memory that the allocator uses. A higher ratio indicates less memory waste.
At any time, sum the sizes of all blocks in allocated_list and divide by the total size from allocator_init(size).

1.3
double average_frag() {
    1. create an int
    2. go through free_list and save the largest free block found (this implementation ignores merging adjacent free blocks)
    3. while doing this, find total free memory
    4. then calculate 1 - (largest free block / total free memory)
}
If all free memory is contiguous, the ratio will be 1, making the score 0 (perfect and no fragmentation).

2.1
The given pseudocode is not appropriate for simulating fragmentation as it deallocates the memory after allocating it. If the implementation
also merged adjacent free blocks, fragmentation would never happen as memory will never stay allocated at the beginning of each loop iteration.
PSEUDOCODE:

#define MAX_ALLOCATIONS 1000

//initialize your custom memory allocator to work with a pool of 10240 bytes (10K)

srandom(seed); // initialize PRNG, or Pseudo-Random Number Generator

int r=0;

void* memory_blocks[MAX_ALLOCATIONS];
int active_count = 0;

while (r < requests) {

  action = random() % 2;

  if (action is even || active_count = 0) {
    s = a random number between 100 and 1000;
    p = allocate(algorithm, s)
    // this will require you to change your allocate function
    // so that it accepts the algorithm parameter to select an
    // allocation policy
  } else {
    idx = random number between 0 and n - 1
    deallocate memory that is stored in idx and move last element in memory_blocks to idx
  }
  

  deallocate(p);
}
